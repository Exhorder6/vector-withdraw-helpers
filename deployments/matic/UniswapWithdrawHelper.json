{
  "address": "0xf824c0C3F15f2440f4932C02BBD01e7344B56910",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "channelAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "assetId",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "callTo",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct WithdrawData",
          "name": "wd",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "actualAmount",
          "type": "uint256"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            }
          ],
          "internalType": "struct UniswapWithdrawHelper.SwapData",
          "name": "swapData",
          "type": "tuple"
        }
      ],
      "name": "getCallData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x399d92a6c9ff8e6b89e4fb4fa6e1cbbe78dcb49efb89ea414cb78e65171710d4",
  "receipt": {
    "to": null,
    "from": "0xd4b33434Cb36df9286Ef5132FCFb8062c96aC56E",
    "contractAddress": "0xf824c0C3F15f2440f4932C02BBD01e7344B56910",
    "transactionIndex": 9,
    "gasUsed": "1079864",
    "logsBloom": "0x00000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000008000000000000000000000000000000004000000000000000000000000800000020000000000000100000000000000000000080000000000000000000000000000000000000080000000000000000000000000000000800000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000008000000100000",
    "blockHash": "0x5916595a75a05bfa4f9a698f390bc13db16ef0d975cd8fc74658068c1e1ecf6b",
    "transactionHash": "0x399d92a6c9ff8e6b89e4fb4fa6e1cbbe78dcb49efb89ea414cb78e65171710d4",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 12134612,
        "transactionHash": "0x399d92a6c9ff8e6b89e4fb4fa6e1cbbe78dcb49efb89ea414cb78e65171710d4",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d4b33434cb36df9286ef5132fcfb8062c96ac56e",
          "0x0000000000000000000000007b5000af8ab69fd59eb0d4f5762bff57c9c04385"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000003d6216e2030000000000000000000000000000000000000000000000000a2a13d7fa4ef5812000000000000000000000000000000000000000000000000e985a2b5e4b0b867590000000000000000000000000000000000000000000000a2a139a9838137e2000000000000000000000000000000000000000000000000e985a68c061ed89759",
        "logIndex": 26,
        "blockHash": "0x5916595a75a05bfa4f9a698f390bc13db16ef0d975cd8fc74658068c1e1ecf6b"
      }
    ],
    "blockNumber": 12134612,
    "cumulativeGasUsed": "2294845",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "a805f5b34b18b55a45b0b4c5fb7c44a8",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"channelAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct WithdrawData\",\"name\":\"wd\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"internalType\":\"struct UniswapWithdrawHelper.SwapData\",\"name\":\"swapData\",\"type\":\"tuple\"}],\"name\":\"getCallData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapWithdrawHelper/UniswapWithdrawHelper.sol\":\"UniswapWithdrawHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v2-core/contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x61db17aebc5d812c7002d15c1da954065e56abe49d64b14c034abe5604d70eb3\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/UniswapWithdrawHelper/UniswapWithdrawHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.5.0;\\npragma experimental ABIEncoderV2;\\n\\nimport '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\\nimport '@uniswap/v2-core/contracts/interfaces/IERC20.sol';\\n\\nimport \\\"../common/WithdrawHelper.sol\\\";\\n\\ncontract UniswapWithdrawHelper is WithdrawHelper {\\n  event Swap (\\n    address tokenA,\\n    address tokenB,\\n    uint amountIn,\\n    uint amountOutMin,\\n    address to,\\n    address router,\\n    uint[] amounts\\n  );\\n\\n  struct SwapData {\\n    uint amountIn;\\n    uint amountOutMin;\\n    address tokenA;\\n    address tokenB;\\n    address[] path;\\n    address to;\\n    address router;\\n  }\\n\\n  function getCallData(\\n    SwapData calldata swapData\\n  ) public pure returns (bytes memory) {\\n    return abi.encode(swapData);\\n  }\\n\\n  function execute(WithdrawData calldata wd, uint256 actualAmount) override external {\\n    SwapData memory swapData = abi.decode(wd.callData, (SwapData));\\n\\n    require(swapData.amountIn <= actualAmount, \\\"UniswapWithdrawHelper: amountIn is not <= actualAmount\\\");\\n    require(swapData.tokenA != swapData.tokenB, \\\"UniswapWithdrawHelper: tokens cannot be the same\\\");\\n\\n    if (swapData.tokenA != address(0)) {\\n      require(IERC20(swapData.tokenA).approve(swapData.router, swapData.amountIn), \\\"UniswapWithdrawHelper: tokenA approve failed.\\\");\\n    }\\n\\n    uint[] memory amounts;\\n    if (swapData.tokenA == address(0)) {\\n      amounts = IUniswapV2Router02(swapData.router).swapExactETHForTokens(\\n        swapData.amountOutMin, \\n        swapData.path, \\n        swapData.to, \\n        block.timestamp\\n      );\\n    } else if (swapData.tokenB == address(0)) {\\n      amounts = IUniswapV2Router02(swapData.router).swapExactTokensForETH(\\n        swapData.amountIn,\\n        swapData.amountOutMin, \\n        swapData.path, \\n        swapData.to, \\n        block.timestamp\\n      );\\n    } else {\\n      amounts = IUniswapV2Router02(swapData.router).swapExactTokensForTokens(\\n        swapData.amountIn,\\n        swapData.amountOutMin, \\n        swapData.path, \\n        swapData.to, \\n        block.timestamp\\n      );\\n    }\\n\\n    emit Swap(\\n      swapData.tokenA, \\n      swapData.tokenB, \\n      swapData.amountIn, \\n      swapData.amountOutMin, \\n      swapData.to, \\n      swapData.router, \\n      amounts\\n    );\\n  }\\n}\\n\\n\",\"keccak256\":\"0x2b5c142ea98d2976265c4133fb1dfd1a6396875dfddeb0c6bff54bbfcdb9bd6c\",\"license\":\"UNLICENSED\"},\"contracts/common/ICMCWithdraw.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nstruct WithdrawData {\\n    address channelAddress;\\n    address assetId;\\n    address payable recipient;\\n    uint256 amount;\\n    uint256 nonce;\\n    address callTo;\\n    bytes callData;\\n}\\n\\ninterface ICMCWithdraw {\\n    function getWithdrawalTransactionRecord(WithdrawData calldata wd)\\n        external\\n        view\\n        returns (bool);\\n\\n    function withdraw(\\n        WithdrawData calldata wd,\\n        bytes calldata aliceSignature,\\n        bytes calldata bobSignature\\n    ) external;\\n}\\n\",\"keccak256\":\"0x097dfe95ad19096f9a3dd0138b4a51680c26e665d1639278a7c0a5c9f7fc5c78\",\"license\":\"UNLICENSED\"},\"contracts/common/WithdrawHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ICMCWithdraw.sol\\\";\\n\\ninterface WithdrawHelper {\\n    function execute(WithdrawData calldata wd, uint256 actualAmount) external;\\n}\\n\",\"keccak256\":\"0x45bd70363bc7a45001589d55d8d068a3baa321c50382c0c73f1ffae45adfc4bb\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061129c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806390b1a4531461003b578063f50cd32c1461006b575b600080fd5b610055600480360381019061005091906108e2565b610087565b6040516100629190610e1d565b60405180910390f35b61008560048036038101906100809190610964565b6100b0565b005b60608160405160200161009a9190610e9f565b6040516020818303038152906040529050919050565b6100b861058b565b828060c001906100c89190610f67565b8101906100d59190610923565b9050818160000151111561011e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011590610e7f565b60405180910390fd5b806060015173ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff161415610195576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018c90610e3f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff16146102a657806040015173ffffffffffffffffffffffffffffffffffffffff1663095ea7b38260c0015183600001516040518363ffffffff1660e01b8152600401610214929190610df4565b602060405180830381600087803b15801561022e57600080fd5b505af1158015610242573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026691906108b9565b6102a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029c90610e5f565b60405180910390fd5b5b6060600073ffffffffffffffffffffffffffffffffffffffff16826040015173ffffffffffffffffffffffffffffffffffffffff16141561038e578160c0015173ffffffffffffffffffffffffffffffffffffffff16637ff36ab5836020015184608001518560a00151426040518563ffffffff1660e01b81526004016103309493929190610ec1565b600060405180830381600087803b15801561034a57600080fd5b505af115801561035e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103879190610878565b905061052a565b600073ffffffffffffffffffffffffffffffffffffffff16826060015173ffffffffffffffffffffffffffffffffffffffff16141561047a578160c0015173ffffffffffffffffffffffffffffffffffffffff166318cbafe58360000151846020015185608001518660a00151426040518663ffffffff1660e01b815260040161041c959493929190610f0d565b600060405180830381600087803b15801561043657600080fd5b505af115801561044a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104739190610878565b9050610529565b8160c0015173ffffffffffffffffffffffffffffffffffffffff166338ed17398360000151846020015185608001518660a00151426040518663ffffffff1660e01b81526004016104cf959493929190610f0d565b600060405180830381600087803b1580156104e957600080fd5b505af11580156104fd573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105269190610878565b90505b5b7f88572f9142b417e94613ef9b636c3a0111222a20be2363baab18539992f60fb282604001518360600151846000015185602001518660a001518760c001518760405161057d9796959493929190610d7e565b60405180910390a150505050565b6040518060e001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b60008135905061062f81611221565b92915050565b600082601f83011261064657600080fd5b813561065961065482610fef565b610fbe565b9150818183526020840193506020810190508385602084028201111561067e57600080fd5b60005b838110156106ae57816106948882610620565b845260208401935060208301925050600181019050610681565b5050505092915050565b600082601f8301126106c957600080fd5b81516106dc6106d78261101b565b610fbe565b9150818183526020840193506020810190508385602084028201111561070157600080fd5b60005b8381101561073157816107178882610863565b845260208401935060208301925050600181019050610704565b5050505092915050565b60008151905061074a81611238565b92915050565b600060e0828403121561076257600080fd5b81905092915050565b600060e0828403121561077d57600080fd5b61078760e0610fbe565b905060006107978482850161084e565b60008301525060206107ab8482850161084e565b60208301525060406107bf84828501610620565b60408301525060606107d384828501610620565b606083015250608082013567ffffffffffffffff8111156107f357600080fd5b6107ff84828501610635565b60808301525060a061081384828501610620565b60a08301525060c061082784828501610620565b60c08301525092915050565b600060e0828403121561084557600080fd5b81905092915050565b60008135905061085d8161124f565b92915050565b6000815190506108728161124f565b92915050565b60006020828403121561088a57600080fd5b600082015167ffffffffffffffff8111156108a457600080fd5b6108b0848285016106b8565b91505092915050565b6000602082840312156108cb57600080fd5b60006108d98482850161073b565b91505092915050565b6000602082840312156108f457600080fd5b600082013567ffffffffffffffff81111561090e57600080fd5b61091a84828501610750565b91505092915050565b60006020828403121561093557600080fd5b600082013567ffffffffffffffff81111561094f57600080fd5b61095b8482850161076b565b91505092915050565b6000806040838503121561097757600080fd5b600083013567ffffffffffffffff81111561099157600080fd5b61099d85828601610833565b92505060206109ae8582860161084e565b9150509250929050565b60006109c483836109e8565b60208301905092915050565b60006109dc8383610d60565b60208301905092915050565b6109f181611193565b82525050565b610a0081611193565b82525050565b6000610a1283856110b9565b9350610a1d82611047565b8060005b85811015610a5657610a33828461110e565b610a3d88826109b8565b9750610a4883611092565b925050600181019050610a21565b5085925050509392505050565b6000610a6e82611071565b610a7881856110ca565b9350610a8383611051565b8060005b83811015610ab4578151610a9b88826109b8565b9750610aa68361109f565b925050600181019050610a87565b5085935050505092915050565b6000610acc8261107c565b610ad681856110db565b9350610ae183611061565b8060005b83811015610b12578151610af988826109d0565b9750610b04836110ac565b925050600181019050610ae5565b5085935050505092915050565b6000610b2a82611087565b610b3481856110ec565b9350610b448185602086016111db565b610b4d81611210565b840191505092915050565b6000610b656030836110fd565b91507f556e6973776170576974686472617748656c7065723a20746f6b656e7320636160008301527f6e6e6f74206265207468652073616d65000000000000000000000000000000006020830152604082019050919050565b6000610bcb602d836110fd565b91507f556e6973776170576974686472617748656c7065723a20746f6b656e4120617060008301527f70726f7665206661696c65642e000000000000000000000000000000000000006020830152604082019050919050565b6000610c316036836110fd565b91507f556e6973776170576974686472617748656c7065723a20616d6f756e74496e2060008301527f6973206e6f74203c3d2061637475616c416d6f756e74000000000000000000006020830152604082019050919050565b600060e08301610c9d600084018461117c565b610caa6000860182610d60565b50610cb8602084018461117c565b610cc56020860182610d60565b50610cd3604084018461110e565b610ce060408601826109e8565b50610cee606084018461110e565b610cfb60608601826109e8565b50610d096080840184611125565b8583036080870152610d1c838284610a06565b92505050610d2d60a084018461110e565b610d3a60a08601826109e8565b50610d4860c084018461110e565b610d5560c08601826109e8565b508091505092915050565b610d69816111d1565b82525050565b610d78816111d1565b82525050565b600060e082019050610d93600083018a6109f7565b610da060208301896109f7565b610dad6040830188610d6f565b610dba6060830187610d6f565b610dc760808301866109f7565b610dd460a08301856109f7565b81810360c0830152610de68184610ac1565b905098975050505050505050565b6000604082019050610e0960008301856109f7565b610e166020830184610d6f565b9392505050565b60006020820190508181036000830152610e378184610b1f565b905092915050565b60006020820190508181036000830152610e5881610b58565b9050919050565b60006020820190508181036000830152610e7881610bbe565b9050919050565b60006020820190508181036000830152610e9881610c24565b9050919050565b60006020820190508181036000830152610eb98184610c8a565b905092915050565b6000608082019050610ed66000830187610d6f565b8181036020830152610ee88186610a63565b9050610ef760408301856109f7565b610f046060830184610d6f565b95945050505050565b600060a082019050610f226000830188610d6f565b610f2f6020830187610d6f565b8181036040830152610f418186610a63565b9050610f5060608301856109f7565b610f5d6080830184610d6f565b9695505050505050565b60008083356001602003843603038112610f8057600080fd5b80840192508235915067ffffffffffffffff821115610f9e57600080fd5b602083019250600182023603831315610fb657600080fd5b509250929050565b6000604051905081810181811067ffffffffffffffff82111715610fe557610fe461120e565b5b8060405250919050565b600067ffffffffffffffff82111561100a5761100961120e565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156110365761103561120e565b5b602082029050602081019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061111d6020840184610620565b905092915050565b6000808335600160200384360303811261113e57600080fd5b83810192508235915060208301925067ffffffffffffffff82111561116257600080fd5b60208202360384131561117457600080fd5b509250929050565b600061118b602084018461084e565b905092915050565b600061119e826111b1565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156111f95780820151818401526020810190506111de565b83811115611208576000848401525b50505050565bfe5b6000601f19601f8301169050919050565b61122a81611193565b811461123557600080fd5b50565b611241816111a5565b811461124c57600080fd5b50565b611258816111d1565b811461126357600080fd5b5056fea264697066735822122087b68153c0b35d0d2942c5e5c5ea23aefc855ae68244c21372076270332afd3564736f6c63430007030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806390b1a4531461003b578063f50cd32c1461006b575b600080fd5b610055600480360381019061005091906108e2565b610087565b6040516100629190610e1d565b60405180910390f35b61008560048036038101906100809190610964565b6100b0565b005b60608160405160200161009a9190610e9f565b6040516020818303038152906040529050919050565b6100b861058b565b828060c001906100c89190610f67565b8101906100d59190610923565b9050818160000151111561011e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011590610e7f565b60405180910390fd5b806060015173ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff161415610195576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018c90610e3f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff16146102a657806040015173ffffffffffffffffffffffffffffffffffffffff1663095ea7b38260c0015183600001516040518363ffffffff1660e01b8152600401610214929190610df4565b602060405180830381600087803b15801561022e57600080fd5b505af1158015610242573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026691906108b9565b6102a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029c90610e5f565b60405180910390fd5b5b6060600073ffffffffffffffffffffffffffffffffffffffff16826040015173ffffffffffffffffffffffffffffffffffffffff16141561038e578160c0015173ffffffffffffffffffffffffffffffffffffffff16637ff36ab5836020015184608001518560a00151426040518563ffffffff1660e01b81526004016103309493929190610ec1565b600060405180830381600087803b15801561034a57600080fd5b505af115801561035e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103879190610878565b905061052a565b600073ffffffffffffffffffffffffffffffffffffffff16826060015173ffffffffffffffffffffffffffffffffffffffff16141561047a578160c0015173ffffffffffffffffffffffffffffffffffffffff166318cbafe58360000151846020015185608001518660a00151426040518663ffffffff1660e01b815260040161041c959493929190610f0d565b600060405180830381600087803b15801561043657600080fd5b505af115801561044a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104739190610878565b9050610529565b8160c0015173ffffffffffffffffffffffffffffffffffffffff166338ed17398360000151846020015185608001518660a00151426040518663ffffffff1660e01b81526004016104cf959493929190610f0d565b600060405180830381600087803b1580156104e957600080fd5b505af11580156104fd573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105269190610878565b90505b5b7f88572f9142b417e94613ef9b636c3a0111222a20be2363baab18539992f60fb282604001518360600151846000015185602001518660a001518760c001518760405161057d9796959493929190610d7e565b60405180910390a150505050565b6040518060e001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b60008135905061062f81611221565b92915050565b600082601f83011261064657600080fd5b813561065961065482610fef565b610fbe565b9150818183526020840193506020810190508385602084028201111561067e57600080fd5b60005b838110156106ae57816106948882610620565b845260208401935060208301925050600181019050610681565b5050505092915050565b600082601f8301126106c957600080fd5b81516106dc6106d78261101b565b610fbe565b9150818183526020840193506020810190508385602084028201111561070157600080fd5b60005b8381101561073157816107178882610863565b845260208401935060208301925050600181019050610704565b5050505092915050565b60008151905061074a81611238565b92915050565b600060e0828403121561076257600080fd5b81905092915050565b600060e0828403121561077d57600080fd5b61078760e0610fbe565b905060006107978482850161084e565b60008301525060206107ab8482850161084e565b60208301525060406107bf84828501610620565b60408301525060606107d384828501610620565b606083015250608082013567ffffffffffffffff8111156107f357600080fd5b6107ff84828501610635565b60808301525060a061081384828501610620565b60a08301525060c061082784828501610620565b60c08301525092915050565b600060e0828403121561084557600080fd5b81905092915050565b60008135905061085d8161124f565b92915050565b6000815190506108728161124f565b92915050565b60006020828403121561088a57600080fd5b600082015167ffffffffffffffff8111156108a457600080fd5b6108b0848285016106b8565b91505092915050565b6000602082840312156108cb57600080fd5b60006108d98482850161073b565b91505092915050565b6000602082840312156108f457600080fd5b600082013567ffffffffffffffff81111561090e57600080fd5b61091a84828501610750565b91505092915050565b60006020828403121561093557600080fd5b600082013567ffffffffffffffff81111561094f57600080fd5b61095b8482850161076b565b91505092915050565b6000806040838503121561097757600080fd5b600083013567ffffffffffffffff81111561099157600080fd5b61099d85828601610833565b92505060206109ae8582860161084e565b9150509250929050565b60006109c483836109e8565b60208301905092915050565b60006109dc8383610d60565b60208301905092915050565b6109f181611193565b82525050565b610a0081611193565b82525050565b6000610a1283856110b9565b9350610a1d82611047565b8060005b85811015610a5657610a33828461110e565b610a3d88826109b8565b9750610a4883611092565b925050600181019050610a21565b5085925050509392505050565b6000610a6e82611071565b610a7881856110ca565b9350610a8383611051565b8060005b83811015610ab4578151610a9b88826109b8565b9750610aa68361109f565b925050600181019050610a87565b5085935050505092915050565b6000610acc8261107c565b610ad681856110db565b9350610ae183611061565b8060005b83811015610b12578151610af988826109d0565b9750610b04836110ac565b925050600181019050610ae5565b5085935050505092915050565b6000610b2a82611087565b610b3481856110ec565b9350610b448185602086016111db565b610b4d81611210565b840191505092915050565b6000610b656030836110fd565b91507f556e6973776170576974686472617748656c7065723a20746f6b656e7320636160008301527f6e6e6f74206265207468652073616d65000000000000000000000000000000006020830152604082019050919050565b6000610bcb602d836110fd565b91507f556e6973776170576974686472617748656c7065723a20746f6b656e4120617060008301527f70726f7665206661696c65642e000000000000000000000000000000000000006020830152604082019050919050565b6000610c316036836110fd565b91507f556e6973776170576974686472617748656c7065723a20616d6f756e74496e2060008301527f6973206e6f74203c3d2061637475616c416d6f756e74000000000000000000006020830152604082019050919050565b600060e08301610c9d600084018461117c565b610caa6000860182610d60565b50610cb8602084018461117c565b610cc56020860182610d60565b50610cd3604084018461110e565b610ce060408601826109e8565b50610cee606084018461110e565b610cfb60608601826109e8565b50610d096080840184611125565b8583036080870152610d1c838284610a06565b92505050610d2d60a084018461110e565b610d3a60a08601826109e8565b50610d4860c084018461110e565b610d5560c08601826109e8565b508091505092915050565b610d69816111d1565b82525050565b610d78816111d1565b82525050565b600060e082019050610d93600083018a6109f7565b610da060208301896109f7565b610dad6040830188610d6f565b610dba6060830187610d6f565b610dc760808301866109f7565b610dd460a08301856109f7565b81810360c0830152610de68184610ac1565b905098975050505050505050565b6000604082019050610e0960008301856109f7565b610e166020830184610d6f565b9392505050565b60006020820190508181036000830152610e378184610b1f565b905092915050565b60006020820190508181036000830152610e5881610b58565b9050919050565b60006020820190508181036000830152610e7881610bbe565b9050919050565b60006020820190508181036000830152610e9881610c24565b9050919050565b60006020820190508181036000830152610eb98184610c8a565b905092915050565b6000608082019050610ed66000830187610d6f565b8181036020830152610ee88186610a63565b9050610ef760408301856109f7565b610f046060830184610d6f565b95945050505050565b600060a082019050610f226000830188610d6f565b610f2f6020830187610d6f565b8181036040830152610f418186610a63565b9050610f5060608301856109f7565b610f5d6080830184610d6f565b9695505050505050565b60008083356001602003843603038112610f8057600080fd5b80840192508235915067ffffffffffffffff821115610f9e57600080fd5b602083019250600182023603831315610fb657600080fd5b509250929050565b6000604051905081810181811067ffffffffffffffff82111715610fe557610fe461120e565b5b8060405250919050565b600067ffffffffffffffff82111561100a5761100961120e565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156110365761103561120e565b5b602082029050602081019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061111d6020840184610620565b905092915050565b6000808335600160200384360303811261113e57600080fd5b83810192508235915060208301925067ffffffffffffffff82111561116257600080fd5b60208202360384131561117457600080fd5b509250929050565b600061118b602084018461084e565b905092915050565b600061119e826111b1565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156111f95780820151818401526020810190506111de565b83811115611208576000848401525b50505050565bfe5b6000601f19601f8301169050919050565b61122a81611193565b811461123557600080fd5b50565b611241816111a5565b811461124c57600080fd5b50565b611258816111d1565b811461126357600080fd5b5056fea264697066735822122087b68153c0b35d0d2942c5e5c5ea23aefc855ae68244c21372076270332afd3564736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}